service: chatless-example

frameworkVersion: ">=1.2.0 <2.0.0"

<<<<<<< HEAD
=======
# plugins:
#   - serverless-python-requirements

>>>>>>> master
custom:
  app_name: chatless
  sqs_name: ${self:custom.app_name}-sqs
 
provider:
  name: aws
<<<<<<< HEAD
  runtime: python3.6 # or python3.7, supported as of November 2018
  memorySize: 128
=======
  runtime: python3.7 # or python3.7, supported as of November 2018
  memorySize: 512 
  environment:
    DYNAMODB_TABLE: Luncherbot 
>>>>>>> master
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
      - sqs:SendMessage
      - sqs:SendMessageBatch
      Resource: "arn:aws:sqs:*:*:${self:custom.sqs_name}"

package:
  exclude:
    - ./** 
  include:
    - ./chromium*
    - ./swiftshader
    - ./chatless/**

resources:
  Resources:
    BufferQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs_name}
        MessageRetentionPeriod: 12000
        VisibilityTimeout: 60

functions:
  chatbot:
<<<<<<< HEAD
    handler: chatless.chatbot_example.handle
=======
    handler: chatbot_example_dynamodb.handle
    timeout: 30
>>>>>>> master
    environment:
      SLACKBOT_OAUTH: 'xoxb-3360794059-669882893493-7MejyIqpXvJLCgGna42MRmAj'
      PROVIDER_REGION: "${self:provider.region}"
      SQS_QUEUE:
        Ref: BufferQueue
    events:
      - http:
          path: chat
          method: post
      - sqs:
          arn:
            Fn::GetAtt:
              - BufferQueue
              - Arn

